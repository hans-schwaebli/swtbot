<project>

	<!-- load up the properties for cruise agents based on their hostnames, if available -->
	<exec executable="hostname" outputproperty="hostname" />
	<property file="host-files/build.${hostname}.properties" />

	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="externals/libs/ant-contrib-1.0b3.jar" />
		</classpath>
	</taskdef>

	<property environment="env" />
	<condition property="path" value="${env.PATH}">
		<isset property="env.PATH" />
	</condition>
	<condition property="path" value="${env.Path}">
		<isset property="env.Path" />
	</condition>

	<macrodef name="check.executable">
		<attribute name="executable" />
		<sequential>
			<echo>Checking for @{executable} on path.</echo>
			<available file="@{executable}" filepath="${path}" property="@{executable}.executable.available" />
			<available file="@{executable}.exe" filepath="${path}" property="@{executable}.executable.available" />
			<fail unless="@{executable}.executable.available" message="@{executable} not available on path. Please ensure that @{executable} is on path." />
			<echo>Found @{executable} on path.</echo>
		</sequential>
	</macrodef>

	<condition property="isWin">
		<contains casesensitive="false" substring="win" string="${os.name}" />
	</condition>

	<target name="check-windows-preconditions" if="isWin">
		<check.executable executable="unzip" />
	</target>

	<target name="check-other-preconditions" unless="isWin">
		<check.executable executable="tar" />
	</target>

	<target name="guess-pde-build-version" unless="pde-build-version">
		<echo>Guessing plugin version of org.eclipse.pde.build.</echo>
		<for param="pde-build-file">
			<dirset dir="../eclipse/plugins/" includes="org.eclipse.pde.build_*" />
			<sequential>
				<propertyregex property="pde-build-version" input="@{pde-build-file}" regexp="org.eclipse.pde.build_(.*)" select="\1" />
			</sequential>
		</for>
		<fail unless="pde-build-version" message="Could not find org.eclipse.pde.build in target eclipse" />
		<echo>Plugin version of org.eclipse.pde.build is "${pde-build-version}"</echo>
	</target>

	<target name="create-build-properties-from-template">
		<copy file="build.properties.template" tofile="build.properties" overwrite="true">
			<filterset>
				<filter token="PDE_BUILD_PLUGIN_VERSION" value="${pde-build-version}" />
			</filterset>
		</copy>
	</target>

	<target name="check-prerequisites">
		<mkdir dir="externals/plugins" />
		<available file="externals/${eclipse.sdk.archive}" property="eclipse-sdk-available" />

		<available file="externals/eclipse-test-framework-3.3.zip" property="eclipse-test-framework-available" />

		<available file="externals/plugins/org.apache.log4j_1.2.13.v200806030600.jar" property="apache-log4j-available" />
		<available file="externals/plugins/org.hamcrest_1.1.0.jar" property="hamcrest-available" />
		<available file="externals/plugins/org.apache.commons.collections_3.2.0.v200803061811.jar" property="commons-collections-available" />
	</target>

	<target name="download-eclipse-sdk" unless="eclipse-sdk-available">
		<get dest="externals/${eclipse.sdk.archive}" src="${eclipse.sdk.url}/${eclipse.sdk.archive}" verbose="true" usetimestamp="true" />
	</target>

	<target name="download-test-framework" unless="eclipse-test-framework-available">
		<get dest="externals/eclipse-test-framework-3.3.zip" src="https://swtbot.svn.sourceforge.net/svnroot/swtbot/branches/java-1.5-api-spike/org.eclipse.swtbot.releng/test-sandbox/eclipse-test-framework-3.3.zip" verbose="true" usetimestamp="true" />
	</target>

	<target name="download-log4j" unless="apache-log4j-available">
		<parallel>
			<get dest="externals/plugins/org.apache.log4j_1.2.13.v200806030600.jar" src="https://swtbot.svn.sourceforge.net/svnroot/swtbot/branches/java-1.5-api-spike/org.eclipse.swtbot.releng/externals/plugins/org.apache.log4j_1.2.13.v200806030600.jar" verbose="true" usetimestamp="true" />
			<get dest="externals/plugins/org.apache.log4j.source_1.2.13.v200806030600.jar" src="https://swtbot.svn.sourceforge.net/svnroot/swtbot/branches/java-1.5-api-spike/org.eclipse.swtbot.releng/externals/plugins/org.apache.log4j.source_1.2.13.v200806030600.jar" verbose="true" usetimestamp="true" />
		</parallel>
	</target>

	<target name="download-hamcrest" unless="hamcrest-available">
		<get dest="externals/plugins/org.hamcrest_1.1.0.jar" src="https://swtbot.svn.sourceforge.net/svnroot/swtbot/branches/java-1.5-api-spike/org.eclipse.swtbot.releng/externals/plugins/org.hamcrest_1.1.0.jar" verbose="true" usetimestamp="true" />
	</target>


	<target name="download-commons-collections" unless="commons-collections-available">
		<parallel>
			<get dest="externals/plugins/org.apache.commons.collections_3.2.0.v200803061811.jar" src="https://swtbot.svn.sourceforge.net/svnroot/swtbot/branches/java-1.5-api-spike/org.eclipse.swtbot.releng/externals/plugins/org.apache.commons.collections_3.2.0.v200803061811.jar" verbose="true" usetimestamp="true" />
			<get dest="externals/plugins/org.apache.commons.collections.source_3.2.0.v200803061811.jar" src="https://swtbot.svn.sourceforge.net/svnroot/swtbot/branches/java-1.5-api-spike/org.eclipse.swtbot.releng/externals/plugins/org.apache.commons.collections.source_3.2.0.v200803061811.jar" verbose="true" usetimestamp="true" />
		</parallel>
	</target>

	<target name="download-prerequisites" depends="check-prerequisites, download-eclipse-sdk, download-test-framework, download-log4j, download-commons-collections, download-hamcrest" />

	<target name="check-conditions" depends="check-windows-preconditions, check-other-preconditions, download-prerequisites">
		<check.executable executable="svn" />
		<available file="build.developer.properties" property="build.developer.properties.available" />
		<fail unless="build.developer.properties.available">Could not find the file "build.developer.properties". Please create the file using "build.developer.properties.sample" as the starting point.</fail>
	</target>

	<target name="initialize-environment" depends="guess-pde-build-version, create-build-properties-from-template" />

	<delete file="${java.io.tmpdir}/git.svn.properties" />
	<touch file="${java.io.tmpdir}/git.svn.properties" />
	<!-- guess svn revision -->
	<exec executable="git" output="${java.io.tmpdir}/git.svn.properties" dir=".." failifexecutionfails="false" failonerror="false">
		<arg line="svn info" />
	</exec>

	<!-- prefix all properties with "svn." and replace spaces to make the keys unique -->
	<loadproperties srcfile="${java.io.tmpdir}/git.svn.properties">
		<filterchain>
			<prefixlines prefix="svn." />
			<deletecharacters chars="\ " />
		</filterchain>
	</loadproperties>

	<delete file="${java.io.tmpdir}/svn.properties" />
	<touch file="${java.io.tmpdir}/svn.properties" />
	<!-- guess svn revision -->
	<exec executable="svn" output="${java.io.tmpdir}/svn.properties" dir=".." failifexecutionfails="false" failonerror="false">
		<arg value="info" />
	</exec>

	<!-- prefix all properties with "svn." and replace spaces to make the keys unique -->
	<loadproperties srcfile="${java.io.tmpdir}/svn.properties">
		<filterchain>
			<prefixlines prefix="svn." />
			<deletecharacters chars="\ " />
		</filterchain>
	</loadproperties>

	<property name="svn.version" value="${svn.LastChangedRev}" />
	<fail unless="svn.version" message="could not determine svn version number" />

	<echo>Sandbox Revision: ${svn.version}</echo>

</project>